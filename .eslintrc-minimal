// This is "minimal" in terms of the requirements placed on authors:
// Rules have been turned off if --fix didn't work, and the manual fix wasn't obvious.
{
  "parser": "babel-eslint",
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": [
    "eslint:recommended",
    "airbnb",
    "plugin:react/recommended"
  ],
  "plugins": [
    "react"
  ],
  "settings": {
    "react": {
      "pragma": "React"
    },
    "ecmascript": 6
  },
  "globals": {
    "VERSION": false
  },
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 6
  },
  "rules": {
    // Turn a lot of rules off: We plan to fix one kind of error at a time, so we can remove these exceptions,
    // and eventually delete this file and just have one .exlintrc.
    "no-param-reassign": 0,
    "no-return-assign": 0,
    "no-undef": 0,
    "react/no-find-dom-node": 0,
    "react/no-unused-prop-types": 0,
    "react/require-default-props": 0,

    // In many cases, we want consistent method signatures,
    // even if a particular instance does not use all the parameters.
    "no-unused-vars": ["error", { "args": "none" }],

    // By default, this is a warning, but most properties were in order,
    // and the few exceptions added a lot of noise to the logs.
    "react/jsx-sort-props": ["error"],

    // Below here should match .eslintrc,
    // except for the properties tweaked above.
    "jsx-a11y/anchor-is-valid": 0,
    "jsx-a11y/click-events-have-key-events": 0,
    "jsx-a11y/no-noninteractive-element-interactions": 0,
    "jsx-a11y/no-static-element-interactions": 0,
    "jsx-a11y/role-has-required-aria-props": 0,
    "class-methods-use-this": 0,
    "comma-dangle": 0,
    "guard-for-in": 0,
    "jsx-quotes": 2,
    "no-bitwise": 0,
    // "no-console": ["error", { "allow": ["warn", "error"] }],
    "no-constant-condition": 2,
    "no-continue": 0,
    "no-mixed-operators": 0,
    // "no-multi-spaces": ["error", { "ignoreEOLComments": true }],
    // "no-param-reassign": ["error", { "props": false }],
    "no-plusplus": 0,
    "no-prototype-builtins": 0,
    "no-underscore-dangle": 0,
    "prefer-destructuring": 0,
    "react/destructuring-assignment": 0,
    "react/display-name": 0,
    "react/forbid-prop-types": 0,
    "react/jsx-boolean-value": 0,
    "react/jsx-closing-bracket-location": 2,
    "react/jsx-curly-spacing": 2,
    "react/jsx-equals-spacing": 2,
    "react/jsx-filename-extension": [2, { "extensions": [".js", ".jsx"] }],
    "react/jsx-handler-names": 0,
    "react/jsx-indent": 0,
    "react/jsx-indent-props": 0,
    "react/jsx-key": 2,
    "react/jsx-max-props-per-line": 2,
    "react/jsx-no-bind": [0, {"ignoreRefs": true }],
    "react/jsx-no-duplicate-props": 2,
    "react/jsx-no-literals": 0,
    "react/jsx-no-undef": 2,
    "react/jsx-pascal-case": 2,
    "react/jsx-uses-react": 2,
    "react/jsx-uses-vars": 2,
    "no-restricted-syntax": 0,
    "react/no-danger": 1,
    "react/no-deprecated": 2,
    "react/no-did-mount-set-state": 1,
    "react/no-did-update-set-state": 2,
    "react/no-direct-mutation-state": 1,
    "react/no-is-mounted": 2,
    "react/no-multi-comp": 2,
    "react/no-set-state": 0,
    "react/no-string-refs": 1,
    "react/no-unknown-property": 2,
    "react/no-unused-state": 0,
    "react/prefer-es6-class": 2,
    "react/prop-types": 1,
    "react/react-in-jsx-scope": 1,
    "react/self-closing-comp": 2,
    "react/sort-comp": 1
  },
  "overrides": [
    {
      "files": ["test/**/*.js"],
      "rules": {
        "no-use-before-define": 0 // So viewconfs can be below the body of the test.
      }
    },
    {
      "files": ["app/scripts/*Track.js"],
      "rules": {
        // TODO: turn this back on when the ignore is removed above.
        // "no-unused-vars": ["error", { "args": "none" }]
        // There are many instances where an interface expects parameters,
        // but the code doesn't use them, sometimes because it's a stub.
      }
    }
  ]
}
